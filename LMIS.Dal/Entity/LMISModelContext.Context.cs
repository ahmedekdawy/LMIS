//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LMIS.Dal.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class LMISEntities : DbContext
    {
        public LMISEntities()
            : base("name=LMISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<AdminWorkingStatu> AdminWorkingStatus { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<CareerMapAlternative> CareerMapAlternatives { get; set; }
        public virtual DbSet<CareerMapGuidance> CareerMapGuidances { get; set; }
        public virtual DbSet<ChatLog> ChatLogs { get; set; }
        public virtual DbSet<ChatSetting> ChatSettings { get; set; }
        public virtual DbSet<ConceptDef> ConceptDefs { get; set; }
        public virtual DbSet<ConceptOfNonFormalTraining> ConceptOfNonFormalTrainings { get; set; }
        public virtual DbSet<ConfigCenter> ConfigCenters { get; set; }
        public virtual DbSet<CourseSkillDetail> CourseSkillDetails { get; set; }
        public virtual DbSet<DimTheme> DimThemes { get; set; }
        public virtual DbSet<EmployeerTemplate> EmployeerTemplates { get; set; }
        public virtual DbSet<EmployeerTemplatesDetail> EmployeerTemplatesDetails { get; set; }
        public virtual DbSet<EmployerGuidancekit> EmployerGuidancekits { get; set; }
        public virtual DbSet<EmployerGuidancekitDetail> EmployerGuidancekitDetails { get; set; }
        public virtual DbSet<EmployersTrainingProvider> EmployersTrainingProviders { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventsDetail> EventsDetails { get; set; }
        public virtual DbSet<FactStatisticalData> FactStatisticalDatas { get; set; }
        public virtual DbSet<FAQ> FAQs { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<GeneralCode> GeneralCodes { get; set; }
        public virtual DbSet<HelpfulLink> HelpfulLinks { get; set; }
        public virtual DbSet<IndividualCertificationDetail> IndividualCertificationDetails { get; set; }
        public virtual DbSet<IndividualCertificationDetails_Det> IndividualCertificationDetails_Det { get; set; }
        public virtual DbSet<IndividualDetail> IndividualDetails { get; set; }
        public virtual DbSet<IndividualDetailsDet> IndividualDetailsDets { get; set; }
        public virtual DbSet<IndividualEducationlevel> IndividualEducationlevels { get; set; }
        public virtual DbSet<IndividualEducationlevelDet> IndividualEducationlevelDets { get; set; }
        public virtual DbSet<IndividualExperienceDetail> IndividualExperienceDetails { get; set; }
        public virtual DbSet<IndividualExperienceDetails_Det> IndividualExperienceDetails_Det { get; set; }
        public virtual DbSet<IndividualOtherSkill> IndividualOtherSkills { get; set; }
        public virtual DbSet<IndividualSkillsDetail> IndividualSkillsDetails { get; set; }
        public virtual DbSet<IndividualSkillsDetails_Delete> IndividualSkillsDetails_Delete { get; set; }
        public virtual DbSet<IndividualTrainingDetail> IndividualTrainingDetails { get; set; }
        public virtual DbSet<IndividualTrainingDetails_Det> IndividualTrainingDetails_Det { get; set; }
        public virtual DbSet<InformalSectorMethodDefinition> InformalSectorMethodDefinitions { get; set; }
        public virtual DbSet<InformalSectorMethodLiterature> InformalSectorMethodLiteratures { get; set; }
        public virtual DbSet<JobApplied> JobApplieds { get; set; }
        public virtual DbSet<JobAppliedAdditionalDoc> JobAppliedAdditionalDocs { get; set; }
        public virtual DbSet<JobOffer> JobOffers { get; set; }
        public virtual DbSet<JobOfferAdditionalDoc> JobOfferAdditionalDocs { get; set; }
        public virtual DbSet<JobOfferDetail> JobOfferDetails { get; set; }
        public virtual DbSet<JobOfferEducationLevel> JobOfferEducationLevels { get; set; }
        public virtual DbSet<JobOfferEducationLevelDetail> JobOfferEducationLevelDetails { get; set; }
        public virtual DbSet<jobOfferMedicalDetail> jobOfferMedicalDetails { get; set; }
        public virtual DbSet<jobOfferSkillsDetail> jobOfferSkillsDetails { get; set; }
        public virtual DbSet<JobOtherSkill> JobOtherSkills { get; set; }
        public virtual DbSet<JobSeekersGuidancekit> JobSeekersGuidancekits { get; set; }
        public virtual DbSet<JobSeekersGuidancekitDetail> JobSeekersGuidancekitDetails { get; set; }
        public virtual DbSet<JobseekerTemplate> JobseekerTemplates { get; set; }
        public virtual DbSet<JobseekerTemplatesDetail> JobseekerTemplatesDetails { get; set; }
        public virtual DbSet<Langauge> Langauges { get; set; }
        public virtual DbSet<ListOfEmail> ListOfEmails { get; set; }
        public virtual DbSet<NewHire> NewHires { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewTrainee> NewTrainees { get; set; }
        public virtual DbSet<NonFormalTraining> NonFormalTrainings { get; set; }
        public virtual DbSet<ObsceneWord> ObsceneWords { get; set; }
        public virtual DbSet<OfficeDetail> OfficeDetails { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<Opportunity> Opportunities { get; set; }
        public virtual DbSet<OpportunitiesDetail> OpportunitiesDetails { get; set; }
        public virtual DbSet<OrganizationContact_Info> OrganizationContact_Info { get; set; }
        public virtual DbSet<OrganizationContactInfoDetail> OrganizationContactInfoDetails { get; set; }
        public virtual DbSet<OrganizationDetail> OrganizationDetails { get; set; }
        public virtual DbSet<OrganizationDetails_Det> OrganizationDetails_Det { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PagesAction> PagesActions { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PartnersDetail> PartnersDetails { get; set; }
        public virtual DbSet<PolicesOfEgypt> PolicesOfEgypts { get; set; }
        public virtual DbSet<PortalUser> PortalUsers { get; set; }
        public virtual DbSet<PublicationReport> PublicationReports { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<RecruitmentAgency> RecruitmentAgencies { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<RequestLog> RequestLogs { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SocialMedia> SocialMedias { get; set; }
        public virtual DbSet<StatisticalData> StatisticalDatas { get; set; }
        public virtual DbSet<SubCode> SubCodes { get; set; }
        public virtual DbSet<Testimonial> Testimonials { get; set; }
        public virtual DbSet<TestimonialsDetail> TestimonialsDetails { get; set; }
        public virtual DbSet<ThemesVariable> ThemesVariables { get; set; }
        public virtual DbSet<TrainingApply> TrainingApplies { get; set; }
        public virtual DbSet<TrainingOffer> TrainingOffers { get; set; }
        public virtual DbSet<TrainingOfferDetail> TrainingOfferDetails { get; set; }
        public virtual DbSet<TrainingOfferOccurrence> TrainingOfferOccurrences { get; set; }
        public virtual DbSet<TrainingOtherSkill> TrainingOtherSkills { get; set; }
        public virtual DbSet<TrainingSkillDetail> TrainingSkillDetails { get; set; }
        public virtual DbSet<UnionCommitteeDetail> UnionCommitteeDetails { get; set; }
        public virtual DbSet<UnionCommittee> UnionCommittees { get; set; }
        public virtual DbSet<UnionDetail> UnionDetails { get; set; }
        public virtual DbSet<UnionProfession> UnionProfessions { get; set; }
        public virtual DbSet<Union> Unions { get; set; }
        public virtual DbSet<VariablesMapping> VariablesMappings { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
